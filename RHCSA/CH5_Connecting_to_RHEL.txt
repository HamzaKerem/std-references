su - # requires root passwd
sudo -i # requires privileged user passwd (thus deemed more secure)

/var/log/secure: security events log in RHEL

Historically, a console referred to a physical device that was the primary
input/output interface for a computer system. This often included a keyboard
and a display screen or a teletype machine. In modern systems, the console
often refers to the system console or system terminal. It's the primary
interface for system administrators to interact with the system, especially in
situations where the graphical user interface (GUI) isn't available. For
example, during system boot or in recovery mode.

Virtual terminals allow you to open six different terminal windows from the
same console at the same time and use key sequences Alt+F1-F6 (in a
non-graphical env) to navigate between them. In a graphical env, use key
sequences Ctrl+Alt+F1-F6.
`chvt N` (change virtual terminal) cmd offers same thing.

-F1: Gives access to the GNOME Display Manager (GDM) graphical login
-F2: Provides access to the current graphical console
-F3: Gives access back to the current graphical session
-F4–F6: Gives access to nongraphical consoles

virtual console tty's have corresponding device files /dev/ttyN where N is
1-6.

For terminal windows that are started from a graphical environment, pseudo
terminals are started. These pseudo terminals are referred to using numbers
in the /dev/pts directory. So, the first terminal window that is started from a
graphical environment appears as /dev/pts/1, the second terminal window appears
as /dev/pts/2.  On earlier versions of Linux, pseudo terminals were seen as pty
devices. These types of terminals are now deprecated and replaced with the pts
terminal types

`w` cmd shows who is logged in and what they are doing. Will show
the terminal device logged in from (i.e. pts/0 or tty1)

There are some scenarios, though, in which even experienced Linux 
administrators have to reboot:
-To recover from serious problems such as server hangs and kernel panics
-To apply kernel updates
-To apply changes to kernel modules that are being used currently and 
therefore cannot be reloaded easily

Note: the Linux kernel can be updated without rebooting using a technique
called live patching. This can be particularly useful for applying security
patches or critical bug fixes in environments where uptime is crucial.

The Linux kernel is primarily considered a monolithic kernel. A monolithic
kernel is a type of operating system kernel where the entire operating system,
including device drivers, file system management, and core services like
process and memory management, runs in kernel space. This design contrasts with
microkernels, where the kernel provides minimal services and most other
functionalities are implemented in user space.

The Systemd process is the first process that was started when the server was
started, and it is responsible for managing all other processes, directly or
indirectly. As a result, on system reboots or halts, the Systemd process needs
to make sure that all these processes are stopped.

reboot, halt, poweroff cmds are equivilant to `systemctl
reboot|halt|poweroff`.

halt: stops all processes and shuts down the CPU. However, it does not power
off the machine; it just halts the system. This means that the system stops
running, but the power remains on, and the hardware is not completely turned
off. This is useful if you want to stop all processes but leave the machine in
a state where you might be able to restart it quickly.

poweroff: not only halts the system but also powers off the machine.

emergency reset option (if reboot not working):
echo b > /proc/sysrq-trigger # as root

Use -v to observer why ssh is running slow. After you connect to the remote
server, a public key fingerprint of remote server is stored in the file
~/.ssh/known_hosts. -Y enables support for graphical apps.

If you encounter a mismatch (that may happen if remote server gets reinstalled
or the same IP is being used by a different server now) between the host key
fingerprint that is presented and the one that you’ve cached on local machine,
you just have to remove the key fingerprint from the ~/.ssh/known_hosts file on
the client computer. Systemwide ssh config: /etc/ssh/ssh_config

sftp (secure FTP) command is a part of the SSH solution and enables users to
use an FTP command-line syntax to transfer files using sshd. `scp -P PORT` or
`ssh -p PORT` for port use. Notice that when working with sftp, the local
directory is important, even if after opening the FTP session you only see the
remote directory on the server. When you’re downloading a file using the get
command, the file will be stored in the current local directory, and when
you’re uploading a file using put, the file will be searched for in the local
directory. Note: sftp operates on port 22, ftp on 21.

# disable ssl, put local file to remote dir
lftp -u USER,PASS HOST -e "set ssl:verify-certificate no; put local_file -o
/path/to/remote/dir/filename; bye"

The rsync command uses SSH to synchronize files between a remote directory and
a local directory. The advantage of synchronizing files is that only differences need
to be considered.

some options to keep in mind:
-r # Synchronizes the entire directory tree
-l # Copies symbolic links as symbolic links
-p # Preserves permissions
-n # Performs only a dry run, not actually synchronizing anything
-a # Uses archive mode, thus ensuring that entire subdirectory trees and all
file properties will be synchronized
-A #U ses archive mode, and in addition synchronizes ACLs
-X #Synchronizes SELinux context as well

If SSH is used on the Internet, it might not be a good idea to allow password log-
ins. SSH is more secure when using public/private keys for authentication. This
authentication method is normally enabled by default because it is more secure than
password-based authentication.

The ssh public key of the target user is stored in the file
$HOME/.ssh/authorized_keys in the SSH server.
example entry (where each is a public key entry):
# ssh_key_type|algorithm    public_key_data    user@hostname
ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIF47u3pF39W4RNOaJV2zVy+xWRxML84GPy8yjqqzGJo6 hkm@hkm-t450s
ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIBs/mCYWzPbv95F5qpaGlYRgcn2hyXSDXtLuOlebAhQb hkm@optiplex-5040

$HOME/.ssh/id_ALGO (where ALGO corresponds to rsa, ed25519, etc.) is the default ssh private key file. Use a passphrase when
generating ssh private key, via `ssh-keygen`, for maximum security; or just
skip for convenience.

ssh-keygen -t ALGORITHM -b LENGTH
ssh-keygen -t ed25519 -b 4096

$HOME/.ssh/id_ALGO.pub is the public key.
